//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/_Scripts/Inputs Maps/BossInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputsMaps
{
    public partial class @BossInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BossInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BossInputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""06870282-819c-4050-b002-bbb8248921e0"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""c1a65b57-d190-4714-97b6-a85c65a8cd70"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2c198a36-1a06-4d8b-887d-778b1fb3af81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability01"",
                    ""type"": ""Button"",
                    ""id"": ""2949574a-d4f5-402a-8161-ef9a668b44b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability02"",
                    ""type"": ""Button"",
                    ""id"": ""bea864b7-c21c-40cd-aaf0-8de2b8965dab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8e49331d-a656-4026-a654-53e73b6bafcb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b11a121-021e-4186-a1a8-60612e3dd11c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e3d508a-ceb4-4f45-8226-0ef191e3c924"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a6ddd7b3-b9be-40bd-9b80-66673d8f767f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""21985e10-7532-4a15-a843-869ee4fc194c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ddc1942-771c-448b-9e3b-fc7ebe731bc1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35596fab-d76a-4b7a-b9c3-3722461febd3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""374762fe-eefd-41cb-959e-2144a3051d27"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Motion = m_Gameplay.FindAction("Motion", throwIfNotFound: true);
            m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
            m_Gameplay_Ability01 = m_Gameplay.FindAction("Ability01", throwIfNotFound: true);
            m_Gameplay_Ability02 = m_Gameplay.FindAction("Ability02", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_Motion;
        private readonly InputAction m_Gameplay_Attack;
        private readonly InputAction m_Gameplay_Ability01;
        private readonly InputAction m_Gameplay_Ability02;
        public struct GameplayActions
        {
            private @BossInputs m_Wrapper;
            public GameplayActions(@BossInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Motion => m_Wrapper.m_Gameplay_Motion;
            public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
            public InputAction @Ability01 => m_Wrapper.m_Gameplay_Ability01;
            public InputAction @Ability02 => m_Wrapper.m_Gameplay_Ability02;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @Motion.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMotion;
                    @Motion.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMotion;
                    @Motion.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMotion;
                    @Attack.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                    @Ability01.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility01;
                    @Ability01.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility01;
                    @Ability01.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility01;
                    @Ability02.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility02;
                    @Ability02.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility02;
                    @Ability02.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbility02;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Motion.started += instance.OnMotion;
                    @Motion.performed += instance.OnMotion;
                    @Motion.canceled += instance.OnMotion;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Ability01.started += instance.OnAbility01;
                    @Ability01.performed += instance.OnAbility01;
                    @Ability01.canceled += instance.OnAbility01;
                    @Ability02.started += instance.OnAbility02;
                    @Ability02.performed += instance.OnAbility02;
                    @Ability02.canceled += instance.OnAbility02;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        public interface IGameplayActions
        {
            void OnMotion(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnAbility01(InputAction.CallbackContext context);
            void OnAbility02(InputAction.CallbackContext context);
        }
    }
}
