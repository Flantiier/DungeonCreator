//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/_Scripts/Inputs Maps/InputsDM.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputsMaps
{
    public partial class @InputsDM : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputsDM()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputsDM"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""eb7f45de-ee3b-4191-ae67-82356ea43618"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8aea4457-75f4-4ba8-ae6e-cc4be2644690"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""031bc89a-4447-4bd6-8358-6d051e492cc8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3360c3e9-c57e-4135-9634-386c5876f00b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateTrap"",
                    ""type"": ""Button"",
                    ""id"": ""ab5d66ea-0f0a-4fa1-911f-913d86a92f66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotate_CW"",
                    ""type"": ""Button"",
                    ""id"": ""4953df66-372a-4ff7-a523-79a31c99add3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotate_ACW"",
                    ""type"": ""Button"",
                    ""id"": ""73490d8e-b4b2-44e3-9fab-a8d41a716965"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scrolling"",
                    ""type"": ""Value"",
                    ""id"": ""4f8445f8-e805-43a7-914c-41d0a9c08936"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e551e2a-c581-44f2-8c11-a90b331c7561"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07fbfb64-a6f6-4cae-a31b-247f784cda01"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateTrap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b8d45e9-e0f2-41b5-8bf6-18901a91e7f4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotate_CW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d4c0f15-f9d7-4a83-b924-563c9c2b0b5d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotate_ACW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5e8423a3-b902-4d4a-8768-0cb649077338"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""56dbeb85-27c3-4426-b81e-738d18e27b60"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MK"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a26a5a7a-65c5-4d24-a91f-9b1421af30e8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MK"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57340c1a-a783-4b4c-834d-825a783eae53"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MK"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88ceff37-ea55-4225-bb1d-71103529fbc3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MK"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0fe5d1c2-2a68-4b83-8919-dbef3c5fceb9"",
                    ""path"": ""<VirtualMouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ed41f3-3288-4ffe-9034-3c8f562f7272"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Scrolling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MK"",
            ""bindingGroup"": ""MK"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
            m_Gameplay_Mouse = m_Gameplay.FindAction("Mouse", throwIfNotFound: true);
            m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
            m_Gameplay_RotateTrap = m_Gameplay.FindAction("RotateTrap", throwIfNotFound: true);
            m_Gameplay_CamRotate_CW = m_Gameplay.FindAction("CamRotate_CW", throwIfNotFound: true);
            m_Gameplay_CamRotate_ACW = m_Gameplay.FindAction("CamRotate_ACW", throwIfNotFound: true);
            m_Gameplay_Scrolling = m_Gameplay.FindAction("Scrolling", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_Move;
        private readonly InputAction m_Gameplay_Mouse;
        private readonly InputAction m_Gameplay_Interact;
        private readonly InputAction m_Gameplay_RotateTrap;
        private readonly InputAction m_Gameplay_CamRotate_CW;
        private readonly InputAction m_Gameplay_CamRotate_ACW;
        private readonly InputAction m_Gameplay_Scrolling;
        public struct GameplayActions
        {
            private @InputsDM m_Wrapper;
            public GameplayActions(@InputsDM wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Gameplay_Move;
            public InputAction @Mouse => m_Wrapper.m_Gameplay_Mouse;
            public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
            public InputAction @RotateTrap => m_Wrapper.m_Gameplay_RotateTrap;
            public InputAction @CamRotate_CW => m_Wrapper.m_Gameplay_CamRotate_CW;
            public InputAction @CamRotate_ACW => m_Wrapper.m_Gameplay_CamRotate_ACW;
            public InputAction @Scrolling => m_Wrapper.m_Gameplay_Scrolling;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                    @Mouse.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouse;
                    @Mouse.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouse;
                    @Mouse.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouse;
                    @Interact.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @RotateTrap.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateTrap;
                    @RotateTrap.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateTrap;
                    @RotateTrap.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotateTrap;
                    @CamRotate_CW.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_CW;
                    @CamRotate_CW.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_CW;
                    @CamRotate_CW.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_CW;
                    @CamRotate_ACW.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_ACW;
                    @CamRotate_ACW.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_ACW;
                    @CamRotate_ACW.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamRotate_ACW;
                    @Scrolling.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScrolling;
                    @Scrolling.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScrolling;
                    @Scrolling.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnScrolling;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Mouse.started += instance.OnMouse;
                    @Mouse.performed += instance.OnMouse;
                    @Mouse.canceled += instance.OnMouse;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @RotateTrap.started += instance.OnRotateTrap;
                    @RotateTrap.performed += instance.OnRotateTrap;
                    @RotateTrap.canceled += instance.OnRotateTrap;
                    @CamRotate_CW.started += instance.OnCamRotate_CW;
                    @CamRotate_CW.performed += instance.OnCamRotate_CW;
                    @CamRotate_CW.canceled += instance.OnCamRotate_CW;
                    @CamRotate_ACW.started += instance.OnCamRotate_ACW;
                    @CamRotate_ACW.performed += instance.OnCamRotate_ACW;
                    @CamRotate_ACW.canceled += instance.OnCamRotate_ACW;
                    @Scrolling.started += instance.OnScrolling;
                    @Scrolling.performed += instance.OnScrolling;
                    @Scrolling.canceled += instance.OnScrolling;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_MKSchemeIndex = -1;
        public InputControlScheme MKScheme
        {
            get
            {
                if (m_MKSchemeIndex == -1) m_MKSchemeIndex = asset.FindControlSchemeIndex("MK");
                return asset.controlSchemes[m_MKSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMouse(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnRotateTrap(InputAction.CallbackContext context);
            void OnCamRotate_CW(InputAction.CallbackContext context);
            void OnCamRotate_ACW(InputAction.CallbackContext context);
            void OnScrolling(InputAction.CallbackContext context);
        }
    }
}
